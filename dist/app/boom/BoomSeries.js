System.register(["app/core/utils/kbn", "lodash", "./index"], function (exports_1, context_1) {
    "use strict";
    var kbn_1, lodash_1, index_1, get_formatted_value, BoomSeries;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (kbn_1_1) {
                kbn_1 = kbn_1_1;
            },
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (index_1_1) {
                index_1 = index_1_1;
            }
        ],
        execute: function () {
            get_formatted_value = function (value, decimals, format) {
                var decimalInfo = index_1.getDecimalsForValue(value, decimals);
                var formatFunc = kbn_1.default.valueFormats[format];
                return formatFunc(value, decimalInfo.decimals, decimalInfo.scaledDecimals);
            };
            BoomSeries = (function () {
                function BoomSeries(seriesData, panel, pattern, options, templateSrv, timeSrv) {
                    this.display_value = "-";
                    this.tooltip = "-";
                    this.value = NaN;
                    this.value_formatted = "-";
                    this.link = "-";
                    var panelDefaultPattern = panel.defaultPattern;
                    var scopedVars = panel.scopedVars;
                    this.custom_values = {};
                    this.debug_mode = options && options.debug_mode === true ? true : false;
                    this.row_col_wrapper = options && options.row_col_wrapper ? options.row_col_wrapper : "_";
                    this.seriesName = "";
                    this.template_row_name = "";
                    this.template_col_name = "";
                    this.template_value = "";
                    this.hidden = false;
                    this.pattern_id = -1;
                    this.color_bg_id = 0;
                    this.color_text_id = 0;
                    this.pattern = pattern;
                    this.pattern_id = pattern.id;
                    var meta0 = seriesData.metas[0];
                    this.seriesName = meta0.alias;
                    if (meta0.dataPoints && meta0.dataPoints.length > 0 && lodash_1.default.last(meta0.dataPoints).length === 2) {
                        this.currentTimeStamp = new Date(lodash_1.default.last(meta0.dataPoints)[1]);
                    }
                    else {
                        this.currentTimeStamp = new Date();
                    }
                    this.seriesNames = seriesData.splits;
                    this.decimals = this.pattern.decimals || panelDefaultPattern.decimals || 2;
                    if (meta0.stats) {
                        this.value = meta0.value;
                        if (lodash_1.default.isNaN(this.value) || this.value === null) {
                            this.display_value = this.pattern.null_value;
                        }
                        else {
                            this.display_value = String(this.value);
                        }
                        if (!isNaN(this.value)) {
                            this.value_formatted = get_formatted_value(this.value, this.decimals, this.pattern.format);
                            this.display_value = String(this.value_formatted);
                        }
                    }
                    if (this.value && this.pattern && this.pattern.filter && (this.pattern.filter.value_below !== "" || this.pattern.filter.value_above !== "")) {
                        if (this.pattern.filter.value_below !== "" && this.value < +(this.pattern.filter.value_below)) {
                            this.hidden = true;
                        }
                        if (this.pattern.filter.value_above !== "" && this.value > +(this.pattern.filter.value_above)) {
                            this.hidden = true;
                        }
                    }
                    this.row_name = this.getRowName(this.pattern, this.row_col_wrapper);
                    this.row_name_raw = this.row_name;
                    this.col_name = this.getColName(this.pattern, this.row_col_wrapper, this.row_name);
                    this.thresholds = this.getThresholds(templateSrv, scopedVars);
                    this.color_bg = this.getBGColor(templateSrv, scopedVars);
                    this.color_text = this.getTextColor(templateSrv, scopedVars);
                    this.template_value = this.getDisplayValueTemplate();
                    this.custom_values = this.getParsingValues(this.pattern, this.row_col_wrapper);
                    this.tooltip = this.pattern.tooltipTemplate || "Series : _series_ <br/>Row Name : _row_name_ <br/>Col Name : _col_name_ <br/>Value : _value_";
                    this.link = this.pattern.enable_clickable_cells ? this.pattern.clickable_cells_link || "#" : "#";
                    if (this.link !== "#") {
                        var range = timeSrv.timeRangeForUrl();
                        this.link += (this.link.indexOf("?") > -1 ? "&from=" + range.from : "?from=" + range.from);
                        this.link += "&to=" + range.to;
                    }
                    this.replaceTokens(templateSrv, scopedVars, meta0);
                    this.cleanup();
                }
                BoomSeries.prototype.getThresholds = function (templateSrv, scopedVars) {
                    var _this = this;
                    var thresholds = [];
                    if (this.pattern.enable_filtered_thresholds) {
                        lodash_1.default.each(this.pattern.filtered_thresholds, function (fth) {
                            if (_this.seriesName.match(fth.match)) {
                                thresholds = templateSrv.replace(fth.threshold, scopedVars).split(",").map(function (d) { return +d; });
                                return;
                            }
                        });
                    }
                    else {
                        thresholds = templateSrv.replace(this.pattern.thresholds, scopedVars).split(",").map(function (d) { return +d; });
                    }
                    if (this.pattern.enable_time_based_thresholds) {
                        var metricrecivedTimeStamp_1 = this.currentTimeStamp || new Date();
                        var metricrecivedTimeStamp_innumber_1 = metricrecivedTimeStamp_1.getHours() * 100 + metricrecivedTimeStamp_1.getMinutes();
                        var weekdays_1 = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
                        lodash_1.default.each(this.pattern.time_based_thresholds, function (tbtx) {
                            if (tbtx && tbtx.from && tbtx.to && tbtx.enabledDays &&
                                (metricrecivedTimeStamp_innumber_1 >= +(tbtx.from)) &&
                                (metricrecivedTimeStamp_innumber_1 <= +(tbtx.to)) &&
                                (tbtx.enabledDays.toLowerCase().indexOf(weekdays_1[metricrecivedTimeStamp_1.getDay()]) > -1) &&
                                tbtx.threshold) {
                                thresholds = (tbtx.threshold + "").split(",").map(function (d) { return +d; });
                            }
                        });
                    }
                    return thresholds;
                };
                BoomSeries.prototype.getBGColor = function (templateSrv, scopedVars) {
                    var _this = this;
                    var bgColor = "transparent";
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        bgColor = this.pattern.null_color || "darkred";
                        if (this.pattern.null_color === "") {
                            bgColor = "transparent";
                        }
                    }
                    else {
                        bgColor = this.pattern.defaultBGColor || bgColor;
                        if (this.pattern.enable_bgColor && this.pattern.bgColors) {
                            var list_of_bgColors_based_on_thresholds = templateSrv.replace(this.pattern.bgColors, scopedVars).split("|");
                            var ret = index_1.getItemBasedOnThreshold(this.thresholds, list_of_bgColors_based_on_thresholds, this.value, bgColor);
                            bgColor = ret.value;
                            this.color_bg_id = ret.index;
                        }
                        if (this.pattern.enable_bgColor_overrides && this.pattern.bgColors_overrides !== "") {
                            var _bgColors_overrides = templateSrv.replace(this.pattern.bgColors_overrides, scopedVars).split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_bgColors_overrides.length > 0 && _bgColors_overrides[0] !== "") {
                                bgColor = ("" + _bgColors_overrides[0]).trim();
                            }
                        }
                    }
                    return index_1.normalizeColor(bgColor);
                };
                BoomSeries.prototype.getTextColor = function (templateSrv, scopedVars) {
                    var _this = this;
                    var textColor = document.body.classList.contains("theme-light") ? "black" : "white";
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        textColor = this.pattern.null_textcolor || textColor;
                    }
                    else {
                        textColor = this.pattern.defaultTextColor || textColor;
                        if (this.pattern.enable_textColor && this.pattern.textColors) {
                            var list_of_textColors_based_on_thresholds = templateSrv.replace(this.pattern.textColors, scopedVars).split("|");
                            var ret = index_1.getItemBasedOnThreshold(this.thresholds, list_of_textColors_based_on_thresholds, this.value, textColor);
                            textColor = ret.value;
                            this.color_text_id = ret.index;
                        }
                        if (this.pattern.enable_textColor_overrides && this.pattern.textColors_overrides !== "") {
                            var _textColors_overrides = templateSrv.replace(this.pattern.textColors_overrides, scopedVars).split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_textColors_overrides.length > 0 && _textColors_overrides[0] !== "") {
                                textColor = ("" + _textColors_overrides[0]).trim();
                            }
                        }
                    }
                    return index_1.normalizeColor(textColor);
                };
                BoomSeries.prototype.getDisplayValueTemplate = function () {
                    var _this = this;
                    var template = "_value_";
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        template = this.pattern.null_value || "No data";
                        if (this.pattern.null_value === "") {
                            template = "";
                        }
                    }
                    else {
                        template = this.pattern.displayTemplate || template;
                        if (this.pattern.enable_transform) {
                            var transform_values = this.pattern.transform_values.split("|");
                            template = index_1.getItemBasedOnThreshold(this.thresholds, transform_values, this.value, template).value;
                        }
                        if (this.pattern.enable_transform_overrides && this.pattern.transform_values_overrides !== "") {
                            var _transform_values_overrides = this.pattern.transform_values_overrides.split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_transform_values_overrides.length > 0 && _transform_values_overrides[0] !== "") {
                                template = ("" + _transform_values_overrides[0]).trim();
                            }
                        }
                        if (this.pattern.enable_transform || this.pattern.enable_transform_overrides) {
                            template = this.seriesNames.reduce(function (r, it, i) {
                                return r.replace(new RegExp(_this.row_col_wrapper + i + _this.row_col_wrapper, "g"), it);
                            }, template);
                        }
                    }
                    return template;
                };
                BoomSeries.prototype.cleanup = function () {
                    if (this.debug_mode !== true) {
                        delete this.seriesName;
                        delete this.seriesNames;
                        delete this.pattern;
                        delete this.thresholds;
                        delete this.decimals;
                        delete this.template_col_name;
                        delete this.template_row_name;
                        delete this.template_value;
                        delete this.value_formatted;
                        delete this.currentTimeStamp;
                    }
                };
                BoomSeries.prototype.getRowName = function (pattern, row_col_wrapper) {
                    var row_name = pattern.row_name;
                    row_name = this.seriesNames.reduce(function (r, it, i) {
                        return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                    }, row_name);
                    if (this.seriesNames.length === 1) {
                        row_name = this.seriesName;
                    }
                    this.template_row_name = row_name;
                    return row_name;
                };
                BoomSeries.prototype.getColName = function (pattern, row_col_wrapper, row_name) {
                    var col_name = pattern.col_name;
                    col_name = this.seriesNames.reduce(function (r, it, i) {
                        return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                    }, col_name);
                    if (this.seriesNames.length === 1 || row_name === this.seriesName) {
                        col_name = pattern.col_name || "Value";
                    }
                    this.template_col_name = col_name;
                    return col_name;
                };
                BoomSeries.prototype.getParsingValues = function (pattern, row_col_wrapper) {
                    var _this = this;
                    var kvs = {};
                    if (pattern.custom_parsing_values !== undefined) {
                        lodash_1.default.each(pattern.custom_parsing_values, function (pv) {
                            if (pv.label === "" || pv.get === "") {
                                return;
                            }
                            kvs[pv.label] = _this.seriesNames.reduce(function (r, it, i) {
                                return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                            }, pv.get);
                        });
                    }
                    return kvs;
                };
                BoomSeries.prototype.replaceTokens = function (templateSrv, scopedVars, series) {
                    var _this = this;
                    this.link = this.seriesNames.reduce(function (r, it, i) {
                        return r.replace(new RegExp(_this.row_col_wrapper + i + _this.row_col_wrapper, "g"), it);
                    }, this.link);
                    this.row_name = this.template_row_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.template_col_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.link = this.link.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.display_value = this.template_value.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.col_name.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.link = this.link.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.row_name = this.row_name.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    this.link = this.link.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    var value_raw = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.display_value = this.display_value.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.display_value = this.display_value.replace(new RegExp("_value_min_raw_", "g"), series.stats.min);
                    this.display_value = this.display_value.replace(new RegExp("_value_min_", "g"), get_formatted_value(series.stats.min, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_max_raw_", "g"), series.stats.max);
                    this.display_value = this.display_value.replace(new RegExp("_value_max_", "g"), get_formatted_value(series.stats.max, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_avg_raw_", "g"), series.stats.avg);
                    this.display_value = this.display_value.replace(new RegExp("_value_avg_", "g"), get_formatted_value(series.stats.avg, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_current_raw_", "g"), series.stats.current);
                    this.display_value = this.display_value.replace(new RegExp("_value_current_", "g"), get_formatted_value(series.stats.current, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_total_raw_", "g"), series.stats.total);
                    this.display_value = this.display_value.replace(new RegExp("_value_total_", "g"), get_formatted_value(series.stats.total, this.decimals, this.pattern.format));
                    var value_formatted = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value_formatted.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_", "g"), value_formatted);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_", "g"), value_formatted);
                    this.display_value = this.display_value.replace(new RegExp("_value_", "g"), value_formatted);
                    this.row_name = index_1.replaceTokens(this.row_name);
                    this.col_name = index_1.replaceTokens(this.col_name);
                    this.display_value = index_1.replaceTokens(this.display_value);
                    lodash_1.default.each(this.custom_values, function (v, k) {
                        _this.tooltip = _this.tooltip.replace(new RegExp("_" + k + "_", "g"), v);
                    });
                    this.row_name = templateSrv.replace(this.row_name, scopedVars);
                    this.col_name = templateSrv.replace(this.col_name, scopedVars);
                    this.display_value = templateSrv.replace(this.display_value, scopedVars);
                    this.tooltip = templateSrv.replace(this.tooltip, scopedVars);
                    this.link = templateSrv.replace(this.link, scopedVars);
                };
                BoomSeries.prototype.toBoomCellDetails = function () {
                    return {
                        "col_name": this.col_name,
                        "color_bg": this.color_bg,
                        "color_text": this.color_text,
                        "display_value": this.display_value,
                        "hidden": this.hidden,
                        "items": [],
                        "link": this.link,
                        "row_name": this.row_name,
                        "tooltip": this.tooltip,
                        "value": this.value,
                    };
                };
                return BoomSeries;
            }());
            exports_1("BoomSeries", BoomSeries);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,
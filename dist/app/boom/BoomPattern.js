System.register(["./index"], function (exports_1, context_1) {
    "use strict";
    var index_1, BoomFixedRow, BoomFixedCol, BoomCustomParsingValue, BoomPattern;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (index_1_1) {
                index_1 = index_1_1;
            }
        ],
        execute: function () {
            BoomFixedRow = (function () {
                function BoomFixedRow(name) {
                    this.sort_as = "";
                    this.match = "";
                    this.name = name;
                }
                return BoomFixedRow;
            }());
            exports_1("BoomFixedRow", BoomFixedRow);
            BoomFixedCol = (function () {
                function BoomFixedCol(name) {
                    this.sort_as = "";
                    this.show_as = "";
                    this.name = name;
                }
                return BoomFixedCol;
            }());
            exports_1("BoomFixedCol", BoomFixedCol);
            BoomCustomParsingValue = (function () {
                function BoomCustomParsingValue() {
                    this.label = "";
                    this.get = "";
                }
                return BoomCustomParsingValue;
            }());
            BoomPattern = (function () {
                function BoomPattern(options) {
                    this.row_col_wrapper = "_";
                    if (options && options.row_col_wrapper) {
                        this.row_col_wrapper = options.row_col_wrapper;
                    }
                    this.bgColors = options && options.bgColors ? options.bgColors : "green|orange|red";
                    this.bgColors_overrides = options && options.bgColors_overrides ? options.bgColors_overrides : "0->green|2->red|1->yellow";
                    this.textColors = options && options.textColors ? options.textColors : "red|orange|green";
                    this.textColors_overrides = options && options.textColors_overrides ? options.textColors_overrides : "0->red|2->green|1->yellow";
                    this.clickable_cells_link = options && options.clickable_cells_link ? options.clickable_cells_link : "";
                    this.col_name = options && options.col_name ? options.col_name : this.row_col_wrapper + "1" + this.row_col_wrapper;
                    this.col_name_as_fixed_row = false;
                    this.decimals = options && options.decimals ? options.decimals : 2;
                    this.delimiter = options && options.delimiter ? options.delimiter : ".";
                    this.displayTemplate = options && options.displayTemplate ? options.displayTemplate : "_value_";
                    this.defaultBGColor = options && options.defaultBGColor ? options.defaultBGColor : "";
                    this.defaultTextColor = options && options.defaultTextColor ? options.defaultTextColor : "";
                    this.enable_bgColor = false;
                    this.enable_bgColor_overrides = false;
                    this.enable_textColor = false;
                    this.enable_textColor_overrides = false;
                    this.enable_clickable_cells = false;
                    this.enable_multivalue_cells = false;
                    this.enable_time_based_thresholds = false;
                    this.enable_filtered_thresholds = false;
                    this.enable_transform = false;
                    this.enable_transform_overrides = false;
                    this.id = -2;
                    this.filter = {
                        value_above: "",
                        value_below: "",
                    };
                    this.fixed_rows = [];
                    this.fixed_cols = [];
                    this.custom_parsing_values = [];
                    this.format = options && options.format ? options.format : "none";
                    this.name = options && options.name ? options.name : "New Pattern";
                    this.null_color = options && options.null_color ? options.null_color : "darkred";
                    this.null_textcolor = options && options.null_Textcolor ? options.null_Textcolor : "black";
                    this.null_value = options && options.null_value ? options.null_value : "No data";
                    this.multi_value_show_priority = "Maximum";
                    this.pattern = options && options.pattern ? options.pattern : "^server.*cpu$";
                    this.row_name = options && options.row_name ? options.row_name : this.row_col_wrapper + "0" + this.row_col_wrapper;
                    this.thresholds = options && options.thresholds ? options.thresholds : "70,90";
                    this.filtered_thresholds = [];
                    this.time_based_thresholds = [];
                    this.transform_values = options && options.transform_values ? options.transform_values : "_value_|_value_|_value_";
                    this.transform_values_overrides = options && options.transform_values_overrides ? options.transform_values_overrides : "0->down|1->up";
                    this.tooltipTemplate = options && options.tooltipTemplate ? options.tooltipTemplate : "Series : _series_ <br/>Row Name : _row_name_ <br/>Col Name : _col_name_ <br/>Value : _value_";
                    this.valueName = options && options.valueName ? options.valueName : "avg";
                    this.grid_pattern = this.pattern;
                    this.grid_delimiter = this.delimiter;
                    this.grid_index = 0;
                    this.grid_data_join = "";
                    this.grid_row_cnt = 0;
                }
                return BoomPattern;
            }());
            exports_1("BoomPattern", BoomPattern);
            BoomPattern.prototype.inverseBGColors = function () {
                this.bgColors = this.bgColors ? this.bgColors.split("|").reverse().join("|") : "";
            };
            BoomPattern.prototype.inverseTextColors = function () {
                this.textColors = this.textColors ? this.textColors.split("|").reverse().join("|") : "";
            };
            BoomPattern.prototype.inverseTransformValues = function () {
                this.transform_values = this.transform_values ? this.transform_values.split("|").reverse().join("|") : "";
            };
            BoomPattern.prototype.add_time_based_thresholds = function () {
                var new_time_based_threshold = new index_1.BoomTimeBasedThreshold();
                this.time_based_thresholds = this.time_based_thresholds || [];
                this.time_based_thresholds.push(new_time_based_threshold);
            };
            BoomPattern.prototype.remove_time_based_thresholds = function (index) {
                if (this.time_based_thresholds.length > 0) {
                    this.time_based_thresholds.splice(Number(index), 1);
                }
            };
            BoomPattern.prototype.add_filter_thresholds = function () {
                var new_filter_threshold = new index_1.BoomFilteredThreshold();
                this.filtered_thresholds = this.filtered_thresholds || [];
                this.filtered_thresholds.push(new_filter_threshold);
            };
            BoomPattern.prototype.remove_filter_thresholds = function (index) {
                if (this.filtered_thresholds.length > 0) {
                    this.filtered_thresholds.splice(Number(index), 1);
                }
            };
            BoomPattern.prototype.add_fixed_row = function () {
                this.fixed_rows = this.fixed_rows || [];
                this.fixed_rows.push(new BoomFixedRow(this.fixed_rows.length.toString()));
            };
            BoomPattern.prototype.remove_fixed_row = function (index) {
                if (this.fixed_rows.length > 0) {
                    this.fixed_rows.splice(Number(index), 1);
                }
            };
            BoomPattern.prototype.add_fixed_col = function () {
                this.fixed_cols = this.fixed_cols || [];
                this.fixed_cols.push(new BoomFixedCol(this.fixed_cols.length.toString()));
            };
            BoomPattern.prototype.remove_fixed_col = function (index) {
                if (this.fixed_cols.length > 0) {
                    this.fixed_cols.splice(Number(index), 1);
                }
            };
            BoomPattern.prototype.add_custom_parsing_value = function () {
                this.custom_parsing_values = this.custom_parsing_values || [];
                this.custom_parsing_values.push(new BoomCustomParsingValue());
            };
            BoomPattern.prototype.remove_custom_parsing_value = function (index) {
                if (this.custom_parsing_values.length > 0) {
                    this.custom_parsing_values.splice(Number(index), 1);
                }
            };
            BoomPattern.prototype.setUnitFormat = function (format) {
                this.format = format && format.value ? format.value : "none";
            };
        }
    };
});
//# sourceMappingURL=data:application/json;base64,